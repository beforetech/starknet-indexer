// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: github.com/dipdup-io/starknet-indexer/pkg/grpc/proto/indexer.proto

package pb

import (
	pb "github.com/dipdup-net/indexer-sdk/pkg/modules/grpc/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head           bool                  `protobuf:"varint,1,opt,name=head,proto3" json:"head,omitempty"`
	Invokes        *InvokeFilters        `protobuf:"bytes,2,opt,name=invokes,proto3" json:"invokes,omitempty"`
	Declares       *DeclareFilters       `protobuf:"bytes,3,opt,name=declares,proto3" json:"declares,omitempty"`
	Deploys        *DeployFilters        `protobuf:"bytes,4,opt,name=deploys,proto3" json:"deploys,omitempty"`
	DeployAccounts *DeployAccountFilters `protobuf:"bytes,5,opt,name=deploy_accounts,json=deployAccounts,proto3" json:"deploy_accounts,omitempty"`
	L1Handlers     *L1HandlerFilter      `protobuf:"bytes,6,opt,name=l1_handlers,json=l1Handlers,proto3" json:"l1_handlers,omitempty"`
	Internals      *InternalFilter       `protobuf:"bytes,7,opt,name=internals,proto3" json:"internals,omitempty"`
	Fees           *FeeFilter            `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees,omitempty"`
	Events         *EventFilter          `protobuf:"bytes,9,opt,name=events,proto3" json:"events,omitempty"`
	Msgs           *MessageFilter        `protobuf:"bytes,10,opt,name=msgs,proto3" json:"msgs,omitempty"`
	Transfers      *TransferFilter       `protobuf:"bytes,11,opt,name=transfers,proto3" json:"transfers,omitempty"`
	StorageDiffs   *StorageDiffFilter    `protobuf:"bytes,12,opt,name=storage_diffs,json=storageDiffs,proto3" json:"storage_diffs,omitempty"`
	TokenBalances  *TokenBalanceFilter   `protobuf:"bytes,13,opt,name=token_balances,json=tokenBalances,proto3" json:"token_balances,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeRequest) GetHead() bool {
	if x != nil {
		return x.Head
	}
	return false
}

func (x *SubscribeRequest) GetInvokes() *InvokeFilters {
	if x != nil {
		return x.Invokes
	}
	return nil
}

func (x *SubscribeRequest) GetDeclares() *DeclareFilters {
	if x != nil {
		return x.Declares
	}
	return nil
}

func (x *SubscribeRequest) GetDeploys() *DeployFilters {
	if x != nil {
		return x.Deploys
	}
	return nil
}

func (x *SubscribeRequest) GetDeployAccounts() *DeployAccountFilters {
	if x != nil {
		return x.DeployAccounts
	}
	return nil
}

func (x *SubscribeRequest) GetL1Handlers() *L1HandlerFilter {
	if x != nil {
		return x.L1Handlers
	}
	return nil
}

func (x *SubscribeRequest) GetInternals() *InternalFilter {
	if x != nil {
		return x.Internals
	}
	return nil
}

func (x *SubscribeRequest) GetFees() *FeeFilter {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *SubscribeRequest) GetEvents() *EventFilter {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SubscribeRequest) GetMsgs() *MessageFilter {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *SubscribeRequest) GetTransfers() *TransferFilter {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *SubscribeRequest) GetStorageDiffs() *StorageDiffFilter {
	if x != nil {
		return x.StorageDiffs
	}
	return nil
}

func (x *SubscribeRequest) GetTokenBalances() *TokenBalanceFilter {
	if x != nil {
		return x.TokenBalances
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *pb.SubscribeResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Block         *Block                `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Declare       *Declare              `protobuf:"bytes,3,opt,name=declare,proto3" json:"declare,omitempty"`
	Deploy        *Deploy               `protobuf:"bytes,4,opt,name=deploy,proto3" json:"deploy,omitempty"`
	DeployAccount *DeployAccount        `protobuf:"bytes,5,opt,name=deploy_account,json=deployAccount,proto3" json:"deploy_account,omitempty"`
	Event         *Event                `protobuf:"bytes,6,opt,name=event,proto3" json:"event,omitempty"`
	Fee           *Fee                  `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	Internal      *Internal             `protobuf:"bytes,8,opt,name=internal,proto3" json:"internal,omitempty"`
	Invoke        *Invoke               `protobuf:"bytes,9,opt,name=invoke,proto3" json:"invoke,omitempty"`
	L1Handler     *L1Handler            `protobuf:"bytes,10,opt,name=l1_handler,json=l1Handler,proto3" json:"l1_handler,omitempty"`
	Message       *StarknetMessage      `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	StorageDiff   *StorageDiff          `protobuf:"bytes,12,opt,name=storage_diff,json=storageDiff,proto3" json:"storage_diff,omitempty"`
	TokenBalance  *TokenBalance         `protobuf:"bytes,13,opt,name=token_balance,json=tokenBalance,proto3" json:"token_balance,omitempty"`
	Transfer      *Transfer             `protobuf:"bytes,14,opt,name=transfer,proto3" json:"transfer,omitempty"`
	EndOfBlock    bool                  `protobuf:"varint,15,opt,name=end_of_block,json=endOfBlock,proto3" json:"end_of_block,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetResponse() *pb.SubscribeResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Subscription) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Subscription) GetDeclare() *Declare {
	if x != nil {
		return x.Declare
	}
	return nil
}

func (x *Subscription) GetDeploy() *Deploy {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *Subscription) GetDeployAccount() *DeployAccount {
	if x != nil {
		return x.DeployAccount
	}
	return nil
}

func (x *Subscription) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Subscription) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Subscription) GetInternal() *Internal {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *Subscription) GetInvoke() *Invoke {
	if x != nil {
		return x.Invoke
	}
	return nil
}

func (x *Subscription) GetL1Handler() *L1Handler {
	if x != nil {
		return x.L1Handler
	}
	return nil
}

func (x *Subscription) GetMessage() *StarknetMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Subscription) GetStorageDiff() *StorageDiff {
	if x != nil {
		return x.StorageDiff
	}
	return nil
}

func (x *Subscription) GetTokenBalance() *TokenBalance {
	if x != nil {
		return x.TokenBalance
	}
	return nil
}

func (x *Subscription) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Subscription) GetEndOfBlock() bool {
	if x != nil {
		return x.EndOfBlock
	}
	return false
}

var File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto protoreflect.FileDescriptor

var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70,
	0x64, 0x75, 0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70, 0x64, 0x75, 0x70, 0x2d, 0x6e,
	0x65, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x70, 0x64, 0x75, 0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70, 0x64, 0x75,
	0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x12,
	0x44, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x6c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xaf, 0x05, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x06, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x31, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x38,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x93, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70, 0x64,
	0x75, 0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescOnce sync.Once
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescData = file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDesc
)

func file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescGZIP() []byte {
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescOnce.Do(func() {
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescData)
	})
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDescData
}

var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_goTypes = []interface{}{
	(*SubscribeRequest)(nil),       // 0: proto.SubscribeRequest
	(*Subscription)(nil),           // 1: proto.Subscription
	(*InvokeFilters)(nil),          // 2: proto.InvokeFilters
	(*DeclareFilters)(nil),         // 3: proto.DeclareFilters
	(*DeployFilters)(nil),          // 4: proto.DeployFilters
	(*DeployAccountFilters)(nil),   // 5: proto.DeployAccountFilters
	(*L1HandlerFilter)(nil),        // 6: proto.L1HandlerFilter
	(*InternalFilter)(nil),         // 7: proto.InternalFilter
	(*FeeFilter)(nil),              // 8: proto.FeeFilter
	(*EventFilter)(nil),            // 9: proto.EventFilter
	(*MessageFilter)(nil),          // 10: proto.MessageFilter
	(*TransferFilter)(nil),         // 11: proto.TransferFilter
	(*StorageDiffFilter)(nil),      // 12: proto.StorageDiffFilter
	(*TokenBalanceFilter)(nil),     // 13: proto.TokenBalanceFilter
	(*pb.SubscribeResponse)(nil),   // 14: proto.SubscribeResponse
	(*Block)(nil),                  // 15: proto.Block
	(*Declare)(nil),                // 16: proto.Declare
	(*Deploy)(nil),                 // 17: proto.Deploy
	(*DeployAccount)(nil),          // 18: proto.DeployAccount
	(*Event)(nil),                  // 19: proto.Event
	(*Fee)(nil),                    // 20: proto.Fee
	(*Internal)(nil),               // 21: proto.Internal
	(*Invoke)(nil),                 // 22: proto.Invoke
	(*L1Handler)(nil),              // 23: proto.L1Handler
	(*StarknetMessage)(nil),        // 24: proto.StarknetMessage
	(*StorageDiff)(nil),            // 25: proto.StorageDiff
	(*TokenBalance)(nil),           // 26: proto.TokenBalance
	(*Transfer)(nil),               // 27: proto.Transfer
	(*pb.UnsubscribeRequest)(nil),  // 28: proto.UnsubscribeRequest
	(*pb.UnsubscribeResponse)(nil), // 29: proto.UnsubscribeResponse
}
var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_depIdxs = []int32{
	2,  // 0: proto.SubscribeRequest.invokes:type_name -> proto.InvokeFilters
	3,  // 1: proto.SubscribeRequest.declares:type_name -> proto.DeclareFilters
	4,  // 2: proto.SubscribeRequest.deploys:type_name -> proto.DeployFilters
	5,  // 3: proto.SubscribeRequest.deploy_accounts:type_name -> proto.DeployAccountFilters
	6,  // 4: proto.SubscribeRequest.l1_handlers:type_name -> proto.L1HandlerFilter
	7,  // 5: proto.SubscribeRequest.internals:type_name -> proto.InternalFilter
	8,  // 6: proto.SubscribeRequest.fees:type_name -> proto.FeeFilter
	9,  // 7: proto.SubscribeRequest.events:type_name -> proto.EventFilter
	10, // 8: proto.SubscribeRequest.msgs:type_name -> proto.MessageFilter
	11, // 9: proto.SubscribeRequest.transfers:type_name -> proto.TransferFilter
	12, // 10: proto.SubscribeRequest.storage_diffs:type_name -> proto.StorageDiffFilter
	13, // 11: proto.SubscribeRequest.token_balances:type_name -> proto.TokenBalanceFilter
	14, // 12: proto.Subscription.response:type_name -> proto.SubscribeResponse
	15, // 13: proto.Subscription.block:type_name -> proto.Block
	16, // 14: proto.Subscription.declare:type_name -> proto.Declare
	17, // 15: proto.Subscription.deploy:type_name -> proto.Deploy
	18, // 16: proto.Subscription.deploy_account:type_name -> proto.DeployAccount
	19, // 17: proto.Subscription.event:type_name -> proto.Event
	20, // 18: proto.Subscription.fee:type_name -> proto.Fee
	21, // 19: proto.Subscription.internal:type_name -> proto.Internal
	22, // 20: proto.Subscription.invoke:type_name -> proto.Invoke
	23, // 21: proto.Subscription.l1_handler:type_name -> proto.L1Handler
	24, // 22: proto.Subscription.message:type_name -> proto.StarknetMessage
	25, // 23: proto.Subscription.storage_diff:type_name -> proto.StorageDiff
	26, // 24: proto.Subscription.token_balance:type_name -> proto.TokenBalance
	27, // 25: proto.Subscription.transfer:type_name -> proto.Transfer
	0,  // 26: proto.IndexerService.Subscribe:input_type -> proto.SubscribeRequest
	28, // 27: proto.IndexerService.Unsubscribe:input_type -> proto.UnsubscribeRequest
	1,  // 28: proto.IndexerService.Subscribe:output_type -> proto.Subscription
	29, // 29: proto.IndexerService.Unsubscribe:output_type -> proto.UnsubscribeResponse
	28, // [28:30] is the sub-list for method output_type
	26, // [26:28] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_init() }
func file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_init() {
	if File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto != nil {
		return
	}
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_init()
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_goTypes,
		DependencyIndexes: file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_depIdxs,
		MessageInfos:      file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_msgTypes,
	}.Build()
	File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto = out.File
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_rawDesc = nil
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_goTypes = nil
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_indexer_proto_depIdxs = nil
}
